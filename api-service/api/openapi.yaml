openapi: 3.0.0
info:
  title: Tapiro API
  description: API for AI-Driven Personalized Advertising Health
  version: 1.0.0
  contact: { name: Tapiro Support, email: tapirosupport@gmail.com }
tags:
  - name: Authentication
    description: Account registration and authentication operations
  - name: User Management
    description: User profile and data management operations
  - name: Store Management
    description: Store profile, API key, and integration management
  - name: Data Collection
    description: Operations for submitting user data for targeted advertising
  - name: Preference Management
    description: Operations for managing user preferences and opt-in/out settings
  - name: Data Retrival
    description: Operations for retrieving user preferences and data
  - name: Health
    description: Health and uptime monitoring
  - name: Admin
    description: Administrative operations for managing taxonomy and keyword mappings
servers:
  - url: https://virtserver.swaggerhub.com/CHAMATHDEWMINA25/TAPIRO/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://api.tapiro.com/v1
    description: Production API
  - url: http://localhost:3000
    description: Development API
paths:
  /users/register:
    post:
      tags: [Authentication]
      summary: Register User
      description: Create a new regular user account
      operationId: registerUser
      security:
        - oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-swagger-router-controller: Authentication

  /stores/register:
    post:
      tags: [Authentication]
      summary: Register Store
      description: Create a new store account
      operationId: registerStore
      security:
        - oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreCreate"
        required: true
      responses:
        "201":
          description: Store created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-swagger-router-controller: Authentication

  /users/profile:
    get:
      tags: [User Management]
      summary: Get User Profile
      description: Get authenticated user's profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:read]
      x-swagger-router-controller: UserProfile

    put:
      tags: [User Management]
      summary: Update User Profile
      description: Update authenticated user's profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:write]
      x-swagger-router-controller: UserProfile

    delete:
      tags: [User Management]
      summary: Delete User Profile
      description: Delete authenticated user's profile
      operationId: deleteUserProfile
      responses:
        "204":
          description: User profile deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:write]
      x-swagger-router-controller: UserProfile

  /stores/profile:
    get:
      tags: [Store Management]
      summary: Get Store Profile
      description: Get authenticated store's profile
      operationId: getStoreProfile
      responses:
        "200":
          description: Store profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:read]
      x-swagger-router-controller: StoreProfile

    put:
      tags: [Store Management]
      summary: Update Store Profile
      description: Update authenticated store's profile
      operationId: updateStoreProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreUpdate"
        required: true
      responses:
        "200":
          description: Store profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:write]
      x-swagger-router-controller: StoreProfile

    delete:
      tags: [Store Management]
      summary: Delete Store Profile
      description: Delete authenticated store's profile
      operationId: deleteStoreProfile
      responses:
        "204":
          description: Store profile deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:write]
      x-swagger-router-controller: StoreProfile

  /users/data:
    post:
      tags: [Data Collection]
      summary: Submit user data
      description: Submit purchase/search history for a user (authenticated via API key)
      operationId: submitUserData
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "202":
          description: Data accepted for processing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-swagger-router-controller: StoreOperations

  /users/{userId}/preferences:
    get:
      tags: [Data Retrival]
      summary: Get user preferences
      description: Retrieve preferences for targeted advertising
      operationId: getUserPreferences
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      responses:
        "200":
          description: UserPreferences retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-swagger-router-controller: StoreOperations

  /users/preferences:
    get:
      tags: [Preference Management]
      summary: Get user preferences
      description: Get the authenticated user's preferences
      operationId: getUserOwnPreferences
      responses:
        "200":
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:read]
      x-swagger-router-controller: PreferenceManagement

    put:
      tags: [Preference Management]
      summary: Update user preferences
      description: Update the user's interest preferences and related settings
      operationId: updateUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferencesUpdate"
        required: true
      responses:
        "200":
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:write]
      x-swagger-router-controller: PreferenceManagement

  /users/preferences/opt-in/{storeId}:
    post:
      tags: [Preference Management]
      summary: Opt in to store data collection
      description: Removes a store from the user's opt-out list to allow data collection
      operationId: optInToStore
      parameters:
        - name: storeId
          in: path
          required: true
          description: ID of the store to opt in to
          schema:
            type: string
      responses:
        "204":
          description: Successfully opted in to store
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:write]
      x-swagger-router-controller: PreferenceManagement

  /users/preferences/opt-out/{storeId}:
    post:
      tags: [Preference Management]
      summary: Opt out from store data collection
      description: Adds a store to the user's opt-out list to prevent data collection
      operationId: optOutFromStore
      parameters:
        - name: storeId
          in: path
          required: true
          description: ID of the store to opt out from
          schema:
            type: string
      responses:
        "204":
          description: Successfully opted out from store
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [user:write]
      x-swagger-router-controller: PreferenceManagement

  /stores/api-keys:
    post:
      tags: [Store Management]
      summary: Generate new API key
      description: Generates a new API key for the authenticated store
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyCreate"
        required: false
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:write]
      x-swagger-router-controller: StoreManagement

    get:
      tags: [Store Management]
      summary: List API keys
      description: Returns all active API keys for the store
      operationId: getApiKeys
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:read]
      x-swagger-router-controller: StoreManagement

  /stores/api-keys/{keyId}:
    delete:
      tags: [Store Management]
      summary: Revoke API key
      description: Revokes a specific API key
      operationId: revokeApiKey
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: API key revoked
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:write]
      x-swagger-router-controller: StoreManagement

  /stores/api-keys/{keyId}/usage:
    post:
      tags: [Store Management]
      summary: Get API key usage statistics
      description: Returns usage data for a specific API key
      operationId: getApiKeyUsage
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                  description: Optional start date for filtering usage data
                endDate:
                  type: string
                  format: date
                  description: Optional end date for filtering usage data
        required: false
      responses:
        "200":
          description: API key usage statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyUsage"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - oauth2: [store:read]
      x-swagger-router-controller: StoreManagement

  /health:
    get:
      tags: [Health]
      summary: Health Check
      description: Comprehensive health check that verifies API and dependencies
      operationId: healthCheck
      responses:
        "200":
          description: Health status information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-swagger-router-controller: Health

  /ping:
    get:
      tags: [Health]
      summary: Simple Uptime Check
      description: Simple ping endpoint for uptime monitoring
      operationId: ping
      responses:
        "200":
          description: Simple response indicating the API is up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingStatus"
      x-swagger-router-controller: Health

components:
  schemas:
    AttributeDistribution:
      type: object
      description: Distribution of attribute values (0.0-1.0)
      additionalProperties:
        type: number
        format: float
        minimum: 0.0
        maximum: 1.0

    User:
      type: object
      required:
        - email
        - auth0Id
      properties:
        userId:
          type: string
          readOnly: true
        auth0Id:
          type: string
          description: Auth0 user ID
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 15
          pattern: "^[a-zA-Z0-9_-]+$"
        phone:
          type: string
          pattern: ^\+?[\d\s-]+$
        preferences:
          type: array
          description: User interest preferences with taxonomy categorization
          items:
            $ref: "#/components/schemas/PreferenceItem"
        privacySettings:
          type: object
          properties:
            dataSharingConsent:
              type: boolean
              default: false
            anonymizeData:
              type: boolean
              default: false
            optInStores:
              type: array
              items:
                type: string
              description: List of store IDs user has opted into
            optOutStores:
              type: array
              items:
                type: string
              description: List of store IDs user has opted out from
        dataAccess:
          type: object
          properties:
            allowedDomains:
              type: array
              items:
                type: string
              description: List of allowed domains for data access
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    Store:
      type: object
      required:
        - name
        - auth0Id
        - address
      properties:
        storeId:
          type: string
          readOnly: true
        auth0Id:
          type: string
          description: Auth0 organization ID
        name:
          type: string
        address:
          type: string
        apiKeys:
          type: array
          items:
            type: string
          description: Hashed API keys
          readOnly: true
        webhooks:
          type: array
          items:
            type: object
            required:
              - url
              - events
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    UserCreate:
      type: object
      required:
        - dataSharingConsent
      properties:
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/PreferenceItem"
        dataSharingConsent:
          type: boolean
          description: User's consent for data sharing

    StoreCreate:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
        address:
          type: string
        webhooks:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]

    UserUpdate:
      type: object
      properties:
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/PreferenceItem"
          description: User interest preferences with taxonomy categorization
        privacySettings:
          type: object
          properties:
            dataSharingConsent:
              type: boolean
            anonymizeData:
              type: boolean
            optInStores:
              type: array
              items:
                type: string
            optOutStores:
              type: array
              items:
                type: string
        dataAccess:
          type: object
          properties:
            allowedDomains:
              type: array
              items:
                type: string

    ApiKey:
      type: object
      properties:
        keyId:
          type: string
          format: uuid
          readOnly: true
        prefix:
          type: string
          readOnly: true
        name:
          type: string
          description: Name for the API key
        createdAt:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: [active, revoked]

    UserData:
      type: object
      required:
        - email
        - dataType
        - entries
      properties:
        email:
          type: string
          description: User's email address
        dataType:
          type: string
          enum: [purchase, search]
          description: Type of data being submitted
        entries:
          type: array
          description: Array of data entries
          items:
            oneOf:
              - $ref: "#/components/schemas/PurchaseEntry"
              - $ref: "#/components/schemas/SearchEntry"
        metadata:
          type: object
          description: Additional information about the collection event
          properties:
            userId:
              type: string
              description: Optional user ID if known
            source:
              type: string
              description: Source of the data (web, mobile, pos, etc)
            deviceType:
              type: string
              description: Type of device used
            sessionId:
              type: string
              description: Unique identifier for the user session

    PurchaseEntry:
      type: object
      required:
        - timestamp
        - items
      properties:
        timestamp:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseItem"
        totalAmount:
          type: number
          format: float

    PurchaseItem:
      type: object
      required:
        - name
        - category
      properties:
        sku:
          type: string
        name:
          type: string
        category:
          type: string
          description: Category ID (e.g., "101") or name (e.g., "smartphones")
        quantity:
          type: integer
          default: 1
        price:
          type: number
          format: float
        attributes:
          $ref: "#/components/schemas/ItemAttributes"

    ItemAttributes:
      type: object
      description: Category-specific attributes
      properties:
        price_range:
          type: string
          enum: [budget, mid_range, premium, luxury]
        brand:
          type: string
        color:
          type: string
        material:
          type: string
        style:
          type: string
        room:
          type: string
        size:
          type: string
        feature:
          type: string
        season:
          type: string
        gender:
          type: string
      additionalProperties: false

    SearchEntry:
      type: object
      required:
        - timestamp
        - query
      properties:
        timestamp:
          type: string
          format: date-time
        query:
          type: string
        category:
          type: string
        results:
          type: integer
        clicked:
          type: array
          items:
            type: string

    UserPreferences:
      type: object
      properties:
        userId:
          type: string
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/PreferenceItem"
        updatedAt:
          type: string
          format: date-time

    UserPreferencesUpdate:
      type: object
      properties:
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/PreferenceItem"
          description: User interest preferences with taxonomy categorization

    PreferenceItem:
      type: object
      required:
        - category
        - score
      properties:
        category:
          type: string
          description: Category ID or name (e.g., "101" or "smartphones")
        score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: Preference score (0.0-1.0)
        attributes:
          type: object
          description: Category-specific attribute preferences
          properties:
            price_range:
              type: object
              properties:
                budget:
                  type: number
                  format: float
                mid_range:
                  type: number
                  format: float
                premium:
                  type: number
                  format: float
                luxury:
                  type: number
                  format: float
            color:
              $ref: "#/components/schemas/AttributeDistribution"
            brand:
              $ref: "#/components/schemas/AttributeDistribution"
            material:
              $ref: "#/components/schemas/AttributeDistribution"
            style:
              $ref: "#/components/schemas/AttributeDistribution"
            room:
              $ref: "#/components/schemas/AttributeDistribution"
            size:
              $ref: "#/components/schemas/AttributeDistribution"
            feature:
              $ref: "#/components/schemas/AttributeDistribution"
            season:
              $ref: "#/components/schemas/AttributeDistribution"
            gender:
              $ref: "#/components/schemas/AttributeDistribution"

    StoreUpdate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        webhooks:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]

    ApiKeyCreate:
      type: object
      properties:
        name:
          type: string
          description: Name for the API key

    ApiKeyList:
      type: array
      items:
        $ref: "#/components/schemas/ApiKey"

    ApiKeyUsage:
      type: object
      properties:
        keyId:
          type: string
        prefix:
          type: string
        name:
          type: string
        totalRequests:
          type: integer
        methodBreakdown:
          type: object
          additionalProperties:
            type: integer
        endpointBreakdown:
          type: object
          additionalProperties:
            type: integer
        dailyUsage:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall health status of the Health
        timestamp:
          type: string
          format: date-time
          description: Time of health check
        service:
          type: string
          description: Service name
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [connected, disconnected, degraded]
            cache:
              type: string
              enum: [connected, disconnected, degraded]
            auth:
              type: string
              enum: [connected, disconnected, degraded, unknown]

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details if available

    PingStatus:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequestError:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: Invalid input parameter

    UnauthorizedError:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: Authentication is required

    ForbiddenError:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: Insufficient permissions

    NotFoundError:
      description: Not found - resource doesn't exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: Resource not found

    ConflictError:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 409
            message: Resource already exists

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            message: Internal server error

  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://dev-zuxebycdcmuazvo8.us.auth0.com/authorize
          tokenUrl: https://dev-zuxebycdcmuazvo8.us.auth0.com/oauth/token
          scopes:
            user:read: Read user data
            user:write: Modify user data
            store:read: Read store data
            store:write: Modify store data
            admin:read: Read admin data
            admin:write: Modify admin data
