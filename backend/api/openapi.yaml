openapi: 3.0.0
info:
  title: Tapiro API
  description: API for AI-Driven Personalized Advertising System
  version: 1.0.0
  contact: { name: Tapiro Support, email: tapirosupport@gmail.com }
tags:
  - name: User Management
    description: Operations for user registration, profile management, and deletion
servers:
  - url: https://virtserver.swaggerhub.com/CHAMATHDEWMINA25/TAPIRO/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://api.tapiro.com/v1
    description: Production API
  - url: http://localhost:3000
    description: Development API
security:
  - oauth2:
      - user:read
      - user:write
      - store:read
      - store:write
paths:
  /users/register:
    post:
      tags:
        - User Management
      summary: Register User
      description: Create a new regular user account
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
      x-swagger-router-controller: Authentication

  /stores/register:
    post:
      tags:
        - User Management
      summary: Register Store
      description: Create a new store account
      operationId: registerStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreCreate"
        required: true
      responses:
        "201":
          description: Store created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
      x-swagger-router-controller: Authentication

  /users/profile:
    get:
      tags:
        - User Management
      summary: Get User Profile
      description: Get authenticated user's profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - user:read
      x-swagger-router-controller: Authentication

    put:
      tags:
        - User Management
      summary: Update User Profile
      description: Update authenticated user's profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - user:write
      x-swagger-router-controller: Authentication

    delete:
      tags:
        - User Management
      summary: Delete User Profile
      description: Delete authenticated user's profile
      operationId: deleteUserProfile
      responses:
        "204":
          description: User profile deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - user:write
      x-swagger-router-controller: Authentication

  /stores/profile:
    get:
      tags:
        - User Management
      summary: Get Store Profile
      description: Get authenticated store's profile
      operationId: getStoreProfile
      responses:
        "200":
          description: Store profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: Store not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - store:read
      x-swagger-router-controller: Authentication

    put:
      tags:
        - User Management
      summary: Update Store Profile
      description: Update authenticated store's profile
      operationId: updateStoreProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreUpdate"
        required: true
      responses:
        "200":
          description: Store profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: Store not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - store:write
      x-swagger-router-controller: Authentication

    delete:
      tags:
        - User Management
      summary: Delete Store Profile
      description: Delete authenticated store's profile
      operationId: deleteStoreProfile
      responses:
        "204":
          description: Store profile deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Store not found
        "500":
          description: Internal server error
      security:
        - oauth2:
            - store:write
      x-swagger-router-controller: Authentication

components:
  schemas:
    User:
      type: object
      required:
        - email
        - auth0Id
      properties:
        userId:
          type: string
          format: uuid
          readOnly: true
        auth0Id:
          type: string
          description: Auth0 user ID
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 15
          pattern: "^[a-zA-Z0-9_-]+$"
        phone:
          type: string
          pattern: ^\+?[\d\s-]+$
        preferences:
          type: array
          items:
            type: string
          description: User preferences (e.g., electronics/fashion)
        privacySettings:
          type: object
          properties:
            dataSharingConsent:
              type: boolean
              default: false
            anonymizeData:
              type: boolean
              default: false
            optOutStores:
              type: array
              items:
                type: string
                format: uuid
              description: List of store IDs user has opted out from
        dataAccess:
          type: object
          properties:
            allowedDomains:
              type: array
              items:
                type: string
              description: List of allowed domains for data access
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    Store:
      type: object
      required:
        - name
        - auth0Id
        - address
      properties:
        storeId:
          type: string
          format: uuid
          readOnly: true
        auth0Id:
          type: string
          description: Auth0 organization ID
        name:
          type: string
        address:
          type: string
        apiKeys:
          type: array
          items:
            type: string
          description: Hashed API keys
          readOnly: true
        webhooks:
          type: array
          items:
            type: object
            required:
              - url
              - events
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    UserCreate:
      type: object
      required:
        - dataSharingConsent
      properties:
        phone:
          type: string
          pattern: ^\+?[\d\s-]+$
          description: User's phone number (optional)
        preferences:
          type: array
          items:
            type: string
        dataSharingConsent:
          type: boolean
          description: User's consent for data sharing

    StoreCreate:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
        address:
          type: string
        webhooks:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]

    UserUpdate:
      type: object
      properties:
        preferences:
          type: array
          items:
            type: string
        privacySettings:
          type: object
          properties:
            dataSharingConsent:
              type: boolean
            anonymizeData:
              type: boolean
            optOutStores:
              type: array
              items:
                type: string
                format: uuid
        dataAccess:
          type: object
          properties:
            allowedDomains:
              type: array
              items:
                type: string

    StoreUpdate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        webhooks:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum: [purchase, opt-out]

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://dev-zuxebycdcmuazvo8.us.auth0.com/authorize
          tokenUrl: https://dev-zuxebycdcmuazvo8.us.auth0.com/oauth/token
          scopes:
            user:read: Read user data
            user:write: Modify user data
            store:read: Read store data
            store:write: Modify store data
