name: CI-Dev

on:
  push:
    branches: ["Development"]
    paths:
      - "backend/**"
      - "web/**"
      - ".github/workflows/ci-dev.yml"
  pull_request:
    branches: ["Development"]

permissions:
  contents: read
  pull-requests: write

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Run unit tests
        working-directory: backend
        run: npm run test

      - name: Run integration tests
        working-directory: backend
        run: npm run test
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Run API tests
        working-directory: backend
        run: npm run test

  web-tests:
    name: Web Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci

      - name: Run unit tests
        working-directory: web
        run: npm run test

      - name: Run component tests
        working-directory: web
        run: npm run test

      # - name: Run E2E tests
      #   uses: cypress-io/github-action@v6
      #   with:
      #     working-directory: web
      #     start: npm run dev
      #     wait-on: "http://localhost:5173"
      #     wait-on-timeout: 120000

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Updated Docker Compose installation
      - name: Install Docker Compose
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

      - name: Configure environment
        run: |
          # Create .env file
          cat << EOF > .env
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_ISSUER_BASE_URL=${{ secrets.AUTH0_ISSUER_BASE_URL }}
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}
          EOF

      - name: Build containers
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
        run: |
          docker compose -f compose.yml build
          docker compose -f compose.yml config

      - name: Test container health
        run: |
          docker compose -f compose.yml up -d
          echo "Waiting for containers to start..."
          sleep 30

          # Simple container status check
          RUNNING_CONTAINERS=$(docker compose ps | grep -c "Up")
          if [ "${RUNNING_CONTAINERS}" -eq 3 ]; then
            echo "All containers are running"
            docker ps
          else
            echo "Container startup failed"
            docker compose ps
            docker compose logs
            exit 1
          fi

      - name: Show logs on failure
        if: failure()
        run: |
          echo "Backend logs:"
          docker compose logs backend
          echo "Frontend logs:"
          docker compose logs web
          echo "Redis logs:"
          docker compose logs redis

      - name: Cleanup
        if: always()
        run: docker compose down

  validate:
    name: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ matrix.service }}
        run: npm run lint

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: npm test

  build:
    needs: validate
    name: Build & Push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/dockerfile.dev
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ matrix.service }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ matrix.service }}:dev | toLowerCase
          cache-from: type=gha
          cache-to: type=gha,mode=max
