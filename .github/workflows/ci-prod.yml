name: CI-Prod

on:
  push:
    branches: ["Production"]
    paths:
      - "api-service/**"
      - "web/**"
      - ".github/workflows/ci-prod.yml"
  pull_request:
    branches: ["Production"]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  api-service-tests:
    name: api-service Tests
    runs-on: ubuntu-latest
    environment: Production
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: api-service/package-lock.json

      - name: Install dependencies
        working-directory: api-service
        run: npm ci

      - name: Run unit tests
        working-directory: api-service
        run: npm run test

      - name: Run integration tests
        working-directory: api-service
        run: npm run test
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Run API tests
        working-directory: api-service
        run: npm run test

  web-tests:
    name: Web Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci

      - name: Run unit tests
        working-directory: web
        run: npm run test

      - name: Run component tests
        working-directory: web
        run: npm run test

      # - name: Run E2E tests
      #   uses: cypress-io/github-action@v6
      #   with:
      #     working-directory: web
      #     start: npm run dev
      #     wait-on: "http://localhost:5173"

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    environment: Production
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Updated Docker Compose installation
      - name: Install Docker Compose
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

      - name: Create env file
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}" >> .env
          echo "AUTH0_ISSUER_BASE_URL=${{ secrets.AUTH0_ISSUER_BASE_URL }}" >> .env
          echo "AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}" >> .env

      - name: Build containers
        run: docker compose -f compose.yml build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

      - name: Test container health
        run: |
          docker compose -f compose.yml up -d
          echo "Waiting for containers to start..."
          sleep 30

          # Simple container status check
          RUNNING_CONTAINERS=$(docker compose ps | grep -c "Up")
          if [ "${RUNNING_CONTAINERS}" -eq 3 ]; then
            echo "All containers are running"
            docker ps
          else
            echo "Container startup failed"
            docker compose ps
            docker compose logs
            exit 1
          fi

      - name: Show logs on failure
        if: failure()
        run: |
          echo "api-service logs:"
          docker compose logs api-service
          echo "Frontend logs:"
          docker compose logs web
          echo "Redis logs:"
          docker compose logs redis

      - name: Cleanup
        if: always()
        run: docker compose down

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  validate:
    name: Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        service: [web, api-service]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ matrix.service }}
        run: npm run lint

      - name: Run tests with coverage
        working-directory: ${{ matrix.service }}
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.service }}/coverage
          flags: ${{ matrix.service }}

  build:
    needs: [security, validate]
    name: Build & Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/Production'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [web, api-service]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker tags
        id: prep
        run: |
          REPO=${GITHUB_REPOSITORY,,}
          echo "repository=${REPO}" >> "$GITHUB_OUTPUT"
          echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/dockerfile.prod
          push: true
          tags: |
            ghcr.io/${{ steps.prep.outputs.repository }}/${{ matrix.service }}:${{ steps.prep.outputs.sha }}
            ghcr.io/${{ steps.prep.outputs.repository }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # release:
  #   needs: build
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/Production'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "18"

  #     - name: Create Release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npx semantic-release
