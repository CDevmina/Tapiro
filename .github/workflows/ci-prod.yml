name: CI-Prod

on:
  push:
    branches: ["Production"]
    paths:
      - "backend/**"
      - "web/**"
      - ".github/workflows/ci-prod.yml"
  pull_request:
    branches: ["Production"]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Run all tests
        working-directory: backend
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:api
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: backend/coverage
          flags: backend

  web-tests:
    name: Web Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci

      - name: Run all tests
        working-directory: web
        run: |
          npm run test:unit
          npm run test:components

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: web
          start: npm run dev
          wait-on: "http://localhost:5173"

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: web/coverage
          flags: web

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production containers
        run: |
          docker build -t tapiro-backend:test -f backend/dockerfile.prod backend/
          docker build -t tapiro-web:test -f web/dockerfile.prod web/

      - name: Test container startup
        run: |
          docker run -d --name backend tapiro-backend:test
          docker run -d --name web tapiro-web:test
          sleep 30

      - name: Verify containers
        run: |
          docker ps
          docker logs backend
          docker logs web

      - name: Test container health
        run: |
          docker exec backend curl -f http://localhost:3000/health || exit 1
          docker exec web curl -f http://localhost:80/health || exit 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  validate:
    name: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ matrix.service }}
        run: npm run lint

      - name: Run tests with coverage
        working-directory: ${{ matrix.service }}
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.service }}/coverage
          flags: ${{ matrix.service }}

  build:
    needs: [security, validate]
    name: Build & Push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/dockerfile.prod
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:latest
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: build
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Production'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
